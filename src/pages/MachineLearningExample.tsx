import { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import { PageLayout } from '../components/layout/PageLayout';
import { StorySection } from '../features/storytelling/StorySection';
import { InteractiveSection } from '../features/interactive/InteractiveSection';
import { ExplanationSection } from '../features/explanations/ExplanationSection';
import { BackHomePortal } from '../components/ui/BackHomePortal';
import { useAuth } from '../contexts/AuthContext';
import { useGamification } from '../contexts/GamificationContext';
import { ConceptPageTemplate } from './ConceptPageTemplate';
import './MachineLearningPage.css';

export const MachineLearningExample = () => {
  const { slug } = useParams();
  const [trainingData, setTrainingData] = useState<
    { height: number; weight: number; sport: string }[]
  >([]);
  const [userPrediction, setUserPrediction] = useState<string>('');
  const [modelPrediction, setModelPrediction] = useState<string>('');
  const [gameScore, setGameScore] = useState(0);
  const [gameCompleted, setGameCompleted] = useState(false);
  const [hasCompletedGame, setHasCompletedGame] = useState(false);

  const { user } = useAuth();
  const { completeActivity } = useGamification();

  // Check if game is already completed
  useEffect(() => {
    const checkGameStatus = async () => {
      if (user) {
        // Game completion status check
        setHasCompletedGame(false);
      }
    };
    checkGameStatus();
  }, [user]);

  const storyContent = {
    title: "L'histoire de Marie et son chien d√©tective",
    content: `Marie adorait les chiens, mais elle avait un probl√®me : elle n'arrivait jamais √† deviner quelle race de chien elle croisait dans la rue. Berger allemand ? Labrador ? Golden retriever ? Impossible de s'y retrouver !

Un jour, elle eut une id√©e g√©niale : "Et si j'apprenais √† un ordinateur √† reconna√Ætre les races de chiens pour moi ?"

Elle commen√ßa par montrer √† son ordinateur des milliers de photos de chiens, en lui disant √† chaque fois : "√áa, c'est un labrador", "√áa, c'est un beagle", "Et √ßa, un husky".

Au d√©but, l'ordinateur √©tait nul. Il pensait qu'un chihuahua √©tait un saint-bernard ! Mais Marie pers√©v√©ra. Plus elle lui montrait d'exemples, plus il devenait pr√©cis.

Apr√®s des semaines d'entra√Ænement, le miracle se produisit. Marie croisa un chien dans la rue, prit une photo, et son ordinateur d√©clara : "Cocker anglais, probabilit√© 94%". Le propri√©taire confirma : c'√©tait exact !

"Tu vois," dit Marie √† son ordinateur, "tu as appris tout seul, juste en observant des exemples. C'est √ßa, le machine learning !"`,
    fact: {
      title: 'üß† Le saviez-vous ?',
      description: `Le terme "Machine Learning" a √©t√© invent√© en 1959 par Arthur Samuel, un pionnier de l'IA chez IBM. Il a cr√©√© un programme qui jouait aux dames et qui s'am√©liorait en jouant contre lui-m√™me. Apr√®s des milliers de parties, le programme est devenu si bon qu'il a battu son cr√©ateur !`,
    },
  };

  const explanationContent = {
    title: 'Comment fonctionne le Machine Learning ?',
    sections: [
      {
        subtitle: "üìä Les donn√©es : le carburant de l'apprentissage",
        content: `Le machine learning commence toujours par des donn√©es. Comme Marie qui montrait des photos de chiens √† son ordinateur, nous devons fournir des exemples √† notre mod√®le. Plus nous avons d'exemples vari√©s et de qualit√©, mieux le mod√®le apprendra.`,
      },
      {
        subtitle: "üéØ L'entra√Ænement : apprendre des patterns",
        content: `Pendant l'entra√Ænement, l'algorithme cherche des patterns dans les donn√©es. Par exemple, il pourrait remarquer que les labradors ont souvent des oreilles tombantes et un pelage court, tandis que les huskies ont des oreilles pointues et un pelage √©pais.`,
      },
      {
        subtitle: "üîÆ La pr√©diction : utiliser ce qu'on a appris",
        content: `Une fois entra√Æn√©, le mod√®le peut faire des pr√©dictions sur de nouvelles donn√©es qu'il n'a jamais vues. C'est comme si Marie pouvait maintenant reconna√Ætre des races de chiens m√™me dans des positions ou des √©clairages diff√©rents.`,
      },
      {
        subtitle: "üìà L'am√©lioration continue",
        content: `Le machine learning n'est pas statique. On peut continuer √† am√©liorer un mod√®le en lui donnant plus de donn√©es ou en ajustant ses param√®tres. C'est un processus it√©ratif d'apprentissage et d'am√©lioration.`,
      },
    ],
  };

  // Training data for the game
  const sampleData = [
    { height: 180, weight: 80, sport: 'Basketball' },
    { height: 185, weight: 85, sport: 'Basketball' },
    { height: 175, weight: 75, sport: 'Basketball' },
    { height: 160, weight: 55, sport: 'Gymnastique' },
    { height: 165, weight: 50, sport: 'Gymnastique' },
    { height: 155, weight: 48, sport: 'Gymnastique' },
    { height: 170, weight: 90, sport: 'Rugby' },
    { height: 175, weight: 95, sport: 'Rugby' },
    { height: 180, weight: 100, sport: 'Rugby' },
  ];

  const trainModel = () => {
    setTrainingData(sampleData);
    setGameScore(gameScore + 10);
  };

  const makePrediction = (height: number, weight: number) => {
    if (trainingData.length === 0) return;

    // Simple prediction based on distance to training examples
    let minDistance = Infinity;
    let predictedSport = '';

    trainingData.forEach((data) => {
      const distance = Math.sqrt(
        Math.pow(height - data.height, 2) + Math.pow(weight - data.weight, 2)
      );
      if (distance < minDistance) {
        minDistance = distance;
        predictedSport = data.sport;
      }
    });

    setModelPrediction(predictedSport);

    if (predictedSport === userPrediction) {
      setGameScore(gameScore + 20);
      if (!gameCompleted) {
        setGameCompleted(true);
        handleGameCompletion();
      }
    }
  };

  const handleGameCompletion = async () => {
    if (user && !hasCompletedGame) {
      const success = await completeActivity(
        'machine-learning-trainer',
        'game',
        100,
        50,
        'Mini-jeu Machine Learning Trainer compl√©t√©'
      );
      if (success) {
        setHasCompletedGame(true);
      }
    }
  };


  // Si ce n'est pas la page machine-learning-basics, afficher le template
  if (slug !== 'machine-learning-basics') {
    return <ConceptPageTemplate />;
  }

  return (
    <PageLayout>
      <div className="machine-learning-page">
        <div className="liquid-background">
          <div className="liquid-blob liquid-blob-1"></div>
          <div className="liquid-blob liquid-blob-2"></div>
          <div className="liquid-blob liquid-blob-3"></div>
        </div>

        <header className="page-hero">
          <div className="hero-content">
            <div className="hero-text">
              <h1 className="page-title">
                <span className="title-gradient">Machine Learning</span>
              </h1>
              <p className="page-subtitle">
                D√©couvre comment les machines apprennent par l'exp√©rience
              </p>
            </div>
            <div className="hero-image-container">
              <img
                src="/images/concepts/machinelearning.png"
                alt="Machine Learning"
                className="hero-image"
              />
              <div className="image-liquid-effect"></div>
            </div>
          </div>
        </header>

        <StorySection story={storyContent} />

        <InteractiveSection title="üèãÔ∏è Entra√Æne ton propre mod√®le ML">
          <div className="ml-trainer-game">
            <h3>Pr√©dis le sport en fonction de la taille et du poids !</h3>

            <div className="game-steps">
              <div
                className={`step ${trainingData.length > 0 ? 'completed' : 'active'}`}
              >
                <h4>√âtape 1: Entra√Æne ton mod√®le</h4>
                <p>Clique pour charger les donn√©es d'entra√Ænement</p>
                <button
                  onClick={trainModel}
                  disabled={trainingData.length > 0}
                  className="train-button"
                >
                  {trainingData.length > 0
                    ? '‚úì Mod√®le entra√Æn√©'
                    : 'Entra√Æner le mod√®le'}
                </button>
              </div>

              {trainingData.length > 0 && (
                <div className="training-data-viz">
                  <h4>Donn√©es d'entra√Ænement</h4>
                  <div className="data-grid">
                    {sampleData.map((data, index) => (
                      <div
                        key={index}
                        className={`data-point ${data.sport.toLowerCase()}`}
                      >
                        <span className="sport-emoji">
                          {data.sport === 'Basketball'
                            ? 'üèÄ'
                            : data.sport === 'Gymnastique'
                              ? 'ü§∏'
                              : 'üèâ'}
                        </span>
                        <span>
                          {data.height}cm, {data.weight}kg
                        </span>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {trainingData.length > 0 && (
                <div
                  className={`step ${gameCompleted ? 'completed' : 'active'}`}
                >
                  <h4>√âtape 2: Teste ton mod√®le</h4>
                  <div className="prediction-test">
                    <p>Nouvelle personne : 172cm, 70kg</p>
                    <p>√Ä ton avis, quel sport pratique-t-elle ?</p>
                    <div className="sport-options">
                      <button
                        onClick={() => setUserPrediction('Basketball')}
                        className={
                          userPrediction === 'Basketball' ? 'selected' : ''
                        }
                      >
                        üèÄ Basketball
                      </button>
                      <button
                        onClick={() => setUserPrediction('Gymnastique')}
                        className={
                          userPrediction === 'Gymnastique' ? 'selected' : ''
                        }
                      >
                        ü§∏ Gymnastique
                      </button>
                      <button
                        onClick={() => setUserPrediction('Rugby')}
                        className={userPrediction === 'Rugby' ? 'selected' : ''}
                      >
                        üèâ Rugby
                      </button>
                    </div>
                    {userPrediction && (
                      <button
                        onClick={() => makePrediction(172, 70)}
                        className="predict-button"
                      >
                        Voir la pr√©diction du mod√®le
                      </button>
                    )}
                    {modelPrediction && (
                      <div className="prediction-result">
                        <p>
                          Pr√©diction du mod√®le :{' '}
                          <strong>{modelPrediction}</strong>
                        </p>
                        {modelPrediction === userPrediction ? (
                          <p className="success">
                            üéâ Bravo ! Tu as compris comment le mod√®le pense !
                          </p>
                        ) : (
                          <p className="hint">
                            ü§î Le mod√®le a choisi diff√©remment. Il se base sur
                            la distance avec les exemples d'entra√Ænement.
                          </p>
                        )}
                      </div>
                    )}
                  </div>
                </div>
              )}
            </div>

            {gameCompleted && (
              <div className="game-completion">
                <h3>üèÜ F√©licitations !</h3>
                <p>Tu as compris le principe du Machine Learning !</p>
                {hasCompletedGame && (
                  <p className="bonus-info">Points bonus d√©j√† obtenus</p>
                )}
              </div>
            )}
          </div>
        </InteractiveSection>

        <ExplanationSection explanation={explanationContent} />


        <BackHomePortal />
      </div>
    </PageLayout>
  );
};
